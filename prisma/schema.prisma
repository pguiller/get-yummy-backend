generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model user {
  id      Int         @id @default(autoincrement())
  name    String
  email   String      @unique
  password String
  status  user_status
  isAdmin Boolean   @default(false)
  recipes Recipe[]
  favorites Favorite[]
  PasswordResetToken PasswordResetToken[]
  RefreshToken RefreshToken[]
}

enum user_status {
  active
  inactive
}

model Recipe {
  id                Int         @id @default(autoincrement())
  name              String   @unique
  date              String
  image             String
  preparation_time  Int
  baking_time       Int?
  thermostat        Int?
  resting_time      Int?
  number_of_persons Int
  link              String?
  ownerId           Int
  owner             user        @relation(fields: [ownerId], references: [id])
  ingredients       Ingredient[]
  steps             Step[]
  tags              Tag[]
  favorites         Favorite[]
}

model Ingredient {
  id         Int           @id @default(autoincrement())
  name       IngredientKind
  unit       Unit?
  value      Float
  recipe     Recipe        @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId   Int
}

enum IngredientKind {
  oeufs
  sucre
  farine
  beurre
  sucre_de_canne
  eau
  chocolat_noir
  chocolat_au_lait
  praline
  sucre_vanille
  noix
  levure
  sel
  citron_jaune
  citron_vert
  maizena
  noix_de_pecan
  poudre_de_noisette
  sucre_glace
  creme
  myrtilles
  oignon
  sauce_soja
  aubergine
  carotte
  sesame
  mirin
  huile_d_olive
  vinaigre_balsamique
  paprika
  thym
  miel
  lait
  creme_liquide
  lait_concentre
  lait_coco
  noix_de_coco
  banane
  fraises
  framboises
  citron
  orange
  pomme
  poire
  peche
  mangue
  ananas
  raisin
  figue
  dattes
  amandes
  noisettes
  pistaches
  cannelle
  muscade
  gingembre
  vanille
  extrait_vanille
  chocolat_blanc
  cacao
  yaourt
  fromage_blanc
  mascarpone
  ricotta
  beurre_de_cacahuete
  compote
  pain
  brioche
  pate_feuilletee
  pate_brisee
  pate_sablee
  riz
  semoule
  quinoa
  lentilles
  pois_chiches
  haricots_rouges
  courgette
  poivron
  champignons
  epinards
  brocoli
  chou_fleur
  patate_douce
  pomme_de_terre
  tomates
  tomates_sechees
  ail
  echalote
  basilic
  coriandre
  persil
  menthe
  romarin
  curry
  curcuma
  piment
  bouillon_legumes
  bouillon_volaille
  sauce_tomate
  sauce_teriyaki
  vinaigre
  moutarde
  ketchup
  mayonnaise
  huile_tournesol
  huile_sesame
  huile_de_colza
  chapelure
  fecule_de_pomme_de_terre
  bicarbonate
  colorant
  poulet
  boeuf
  porc
  dinde
  lardons
  jambon
  saucisse
  chorizo
  canard
  saumon
  thon
  crevettes
  cabillaud
  moules
  calamars
  anchois
  gruyere
  comte
  parmesan
  emmental
  mozzarella
  cheddar
  feta
  roquefort
  bleu
  lait_avoine
  lait_soja
  lait_amande
  creme_soja
  creme_vegetale
  cumin
  zaatar
  sumac
  cinq_epices
  herbes_de_provence
  tabasco
  sauce_huitre
  sauce_bbq
  sauce_poisson
  pois_casses
  haricots_blancs
  flocons_d_avoine
  boulgour
  orge
  polenta
  tofu
  seitan
  tempeh
  pain_de_mie
  oeufs_de_lump
  vinaigre_de_riz
  sirop_d_erable
  sirop_d_agave
  noisette
  pignons
  glacage
}

enum Unit {
  g
  kg
  unité
  mL
  cL
  L
  verre
  sachet
  pincée
  cuill_soupe
  cuill_cafe
}

model Step {
  id          Int      @id @default(autoincrement())
  description String
  image       String?
  recipe      Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId    Int
}

model Tag {
  id       Int    @id @default(autoincrement())
  value    TagEnum
  recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId Int
}

enum TagEnum {
  New
  Best
  Dessert
  Végétarien
  Plat
  Basique
  Apéro
  Entrée
}

model Image {
  id        Int      @id @default(autoincrement())
  filename  String
  path      String
  uploadedAt DateTime @default(now())
}

model Favorite {
  id       Int      @id @default(autoincrement())
  userId   Int
  recipeId Int
  user     user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe   Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, recipeId])
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)
}
